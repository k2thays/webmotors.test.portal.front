podTemplate(inheritFrom: 'agent-ruby') {
    node(POD_LABEL) {
        container('agent-ruby') {
            withAWS(roleAccount:'arn:aws:iam::533642024049:role/role-eks-node-group-jenkins', 
                role:'arn:aws:iam::900266424485:role/role-jenkins-conta-raiz') {
                stage ('Setting vars') {
                    workspacesFolder = pwd()
                }

                stage ('Load Libs') {
                    git branch: 'master',
                        credentialsId: 'deployjenkins2',
                        url: 'git@bitbucket.org:webmotors/qa.libs.git'
                    common = load "common.grovvy"
                }

                stage ('Git pull') {
                  checkout scm
                }
                
                stage('Test: QA Front') {
                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Execuntado os testes automatizados'
                    sh """
                        gem install bundler && bundle install
                        ruby webdrivers.rb
                        parallel_cucumber -n 6 -o 'headless=true -t @testes'
                      """
                      // cucumber headless=true -t @smoke
                  }
                }

                stage('Report') {
                  script {
                      allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: '/allure-results']]
                      ])
                    }
                }

                stage('Quality Gate'){
                    	script{
                    		def result = readJSON file: "${workspacesFolder}/allure-report/history/history-trend.json"
                    		def failed = result.data.failed[0]
                    		def broken = result.data.broken[0]
                    		def skipped = result.data.skipped[0]
                    		def passed = result.data.passed[0]
                    		def totalTests = result.data.total[0]
                    		def totalFailed = failed + broken
                    		def calc = passed * 100 / totalTests
                    		calc = (int)calc
                    		common.Calc(calc, totalTests, passed, totalFailed)
                    }
                }

                stage('Dashboard') {
                  sh """aws s3 cp ${workspacesFolder}/allure-report/history/history-trend.json s3://webmotors-integrated-tests/reports/PJ/FRONT_CRM/history-trend.json"""
                }
            }
        }
    }
}